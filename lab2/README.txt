姓名：傅小桐
学号：22336073
email：fuxt5@mail2.sysu.edu.cn

Agenda使用指南：
进入文件夹，双击agenda.bat，即可在命令行进行交互，完成创建用户、会议等操作。
doc文件夹里是Javadoc。
src文件夹里是实现Agenda的所有代码。
design.md/pdf是该项目的结构、代码实现、实现演示的详细介绍。
batch.txt里写了所有批处理的命令，可随意增减。
pom.xml是maven项目必不可少的配置文件。


心得体会：
在这次议程管理系统的开发过程中，我完成了一个基于命令行交互的Java项目，涵盖了用户注册、身份认证、会议的增删查清等一整套会议管理功能。整个系统采用了典型的面向对象设计思路，并通过Maven组织项目结构，按照“一个类一个文件”的要求实现清晰的模块划分。

在开发初期，首先遇到的挑战是如何合理建模会议与用户之间的关系。由于一个用户既可能是会议的发起者也可能是参与者，因此我设计了 User 类中维护其参与会议的 ID 列表，而 Meeting 类则存储具体的参与者与发起人信息，从而实现了双向的绑定和管理。

针对会议时间管理的问题，我采用了 LocalDateTime 来精确表示会议的开始和结束时间。为防止时间冲突，我在 Meeting 类中设计了 overlap 方法，通过判断时间区间交集来检测会议是否冲突。这个方法在添加会议时发挥了重要作用，有效避免了用户与他人重复安排会议的情况。

此外，用户身份验证逻辑在 UserManager 中实现，通过用户名和密码进行校验，保证了系统的安全性。在实现这些功能的同时，我特别注重了输入的合法性检查和边界处理，例如对于用户不存在、密码错误、会议标题重复、会议不存在等情形，都给予了相应的提示。

在命令行交互设计上，我力求简洁而清晰。例如 add 命令包含发起人、参与人、时间、标题等多个参数，为了避免格式歧义，我规定了统一的时间格式 并在解析阶段提供错误提示。虽然命令输入仍需遵循一定格式，但通过系统的输出提示，用户可以较容易地纠正错误。

我也进行了一系列测试，验证了系统在添加、删除、查询会议时能正确同步用户数据。尤其在删除会议时，系统会同步更新参与者和发起人的信息，防止数据不一致的问题。

这次实验让我更加体会到良好的类设计与模块解耦的重要性。在 MeetingManager 与 UserManager 中，我明确了职责边界，让各自只关注自身应处理的逻辑，增强了系统的可维护性。同时，在不断调试与测试过程中，我也认识到输入验证、错误处理与用户引导同样是系统质量的重要组成部分。